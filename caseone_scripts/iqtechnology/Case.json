{"Folder":null,"Id":"6a27cc6c-3a56-eb11-90f3-0cc47afb2ade","Name":"Case","Description":null,"IsActive":true,"Scheme":[],"Type":{"SysName":"Script","Id":"b9629985-73c5-e911-90ee-0cc47afb2adf","Name":"Скрипт"},"RecurringRules":[],"Script":{"Body":"//Alex Redko\r\n//Ver 3.1.4\r\nexport class Case {\r\n    /*\r\n    Конструктор класса\r\n    Создание дела при пустом вызове и получение дела при передачи id\r\n    @param - id (String or Null) - UUID дела\r\n    @result - Class Case (Object) - информация по делу\r\n    */\r\n    constructor(id = 'Создано автоматически', prjType, resp = context.UserId) {\r\n        if (/........-....-....-....-............/.test(id)) {\r\n            this.id = id;\r\n            this.tabs = [];\r\n            this.caseInfo = this.getinfo();\r\n            this.caseBlocks = this.getMainBlocks();\r\n            this.getAllTabBlocks();\r\n            this.Error = {};\r\n            this.Error.message = null;\r\n        } else {\r\n            let rID = '';\r\n            let reqPT = {\"Name\": prjType};\r\n            let resPT = fetch({\r\n                url: '/api/ProjectTypes/GetProjectTypes',\r\n                method: 'POST',\r\n                body: JSON.stringify(reqPT),\r\n                headers: {'Content-Type': 'application/json'}\r\n            });\r\n            if (/........-....-....-....-............/.test(resp)) {\r\n                rID = resp;\r\n            } else {\r\n                let reqR = {\r\n                    \"UserType\": \"User\",\r\n                    \"NameString\": resp\r\n                };\r\n                let resR = fetch({\r\n                    url: '/api/Users/GetUsers',\r\n                    method: 'POST',\r\n                    body: JSON.stringify(reqR),\r\n                    headers: {'Content-Type': 'application/json'}\r\n                });\r\n                if (JSON.parse(resR.body).Result.length !== 0) {\r\n                    rID = JSON.parse(resR.body).Result[0].Id;\r\n                } else {\r\n                    let temp = resp.split(' ');\r\n                    reqR.NameString = temp[1]+' '+temp[0];\r\n                    let resR2 = fetch({\r\n                        url: '/api/Users/GetUsers',\r\n                        method: 'POST',\r\n                        body: JSON.stringify(reqR),\r\n                        headers: {'Content-Type': 'application/json'}\r\n                    });\r\n                    rID = JSON.parse(resR2.body).Result[0].Id;\r\n                }\r\n                \r\n            }\r\n            let newCase = {\r\n                \"Name\": id,\r\n                \"Responsible\":{\"Id\": rID},\r\n                \"ProjectType\":{\"Id\": JSON.parse(resPT.body).Result[0].Id}\r\n            };\r\n            let resC = fetch({\r\n                url: '/api/projects/CreateProject',\r\n                method: 'POST',\r\n                body: JSON.stringify(newCase),\r\n                headers: {'Content-Type': 'application/json'}\r\n            });\r\n            if (resC.status !== 200) {\r\n                this.Error = resC;\r\n            } else {\r\n                let delo = JSON.parse(resC.body);\r\n                this.id = delo.Result.Id;\r\n                this.tabs = [];\r\n                this.caseInfo = this.getinfo();\r\n                this.caseBlocks = this.getMainBlocks();\r\n                this.getAllTabBlocks();\r\n                this.Error = {};\r\n                this.Error.message = null;\r\n            }\r\n        }\r\n        this.fixCalculationFormulaBug()//-----------<<Фикс бага записи карточки с формулами с делением на 0\r\n    }\r\n\r\n    //Функция исправления бага с фиксацией проблем с полями с типом \"Формула\" где есть деление на 0 или null\r\n    fixCalculationFormulaBug() {\r\n        this.caseBlocks.Blocks.forEach((db, nb) => {\r\n            db.Lines.forEach((dl, nl) => {\r\n                dl.Values.forEach((dv, nv) => {\r\n                    if (dv.Value && dv.Value.CalculationFormulaId && dv.Value.Result === null) {\r\n                        console.log('Нашли проблемную формулу');\r\n                        console.log(JSON.stringify(dv));\r\n                        dv.Value.Result = 0;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n    Перенос блоков из другого дела\r\n    (работает при соответствии блоков в двух карточках)\r\n    @param perentDelo(Object class 'Case') - объект класса 'Case'\r\n    @param name(String) - название блока или части с первого символа\r\n    @result Null\r\n    */\r\n    cloneEqBlocks(perentDelo, name) {\r\n        let blocks = [];\r\n        let perentDeloCopy = JSON.parse(JSON.stringify(perentDelo));\r\n        perentDeloCopy.caseBlocks.Blocks.forEach(i => {\r\n            if (i.Name.indexOf(name) === 0) {\r\n                delete i.Id;\r\n                i.Lines.forEach(l => {\r\n                    delete l.Id;\r\n                });\r\n                blocks.push(i);\r\n            } \r\n        });\r\n        let temp_bloks = this.caseBlocks.Blocks.concat(blocks);\r\n        this.caseBlocks.Blocks = temp_bloks;\r\n    }\r\n\r\n    /*\r\n    Получение связанных дел\r\n    @param Null\r\n    @result Array - массив со связанными делами\r\n    */\r\n    getRelCases() {\r\n        let res = fetch({\r\n            url: '/api/RelatedObjects/GetRelatedObjects/' + this.caseInfo.Id,\r\n            method: 'GET'\r\n        });\r\n        return JSON.parse(res.body).Result;\r\n    }\r\n\r\n    /*\r\n    Добавление связанных дел\r\n    @param arr(Array or String) - массив или строка с id дела для добавления\r\n    @result Null\r\n    */\r\n    setRelCases(arr) {\r\n        let resp = fetch({\r\n            url: '/api/RelatedObjects/GetRelatedObjects/' + this.caseInfo.Id,\r\n            method: 'GET'\r\n        });\r\n        let temp_arr = JSON.parse(resp.body).Result;\r\n        let typeobject = {}.toString.call(arr);\r\n        if (typeobject === \"[object Array]\") {\r\n            arr.forEach(i => {\r\n                temp_arr.push({\r\n                    \"Id\": i,\r\n                    \"Type\": \"Project\"\r\n                    });\r\n            });\r\n        } else {\r\n                temp_arr.push({\r\n                    \"Id\": arr,\r\n                    \"Type\": \"Project\"\r\n                    });\r\n        };\r\n        let body = {\r\n            \"Id\": this.caseInfo.Id,\r\n            \"Type\": \"ProjectToProjects\",\r\n            \"RelatedObjects\": temp_arr\r\n        }\r\n        let res = fetch({\r\n            url: '/api/RelatedObjects/SaveRelatedObjects',\r\n            method: 'PUT',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body)\r\n        });\r\n    }\r\n\r\n    /*\r\n    Получение ссылки на себяя же\r\n    @param Null\r\n    @result Object - Id и Name для записи в поле \"Объект -> Дело\"\r\n    */\r\n    getSelf() {\r\n        let self = {};\r\n        self.Id = this.caseInfo.Id;\r\n        self.Name = this.caseInfo.Name;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n    Получение имени дела\r\n    @param Null\r\n    @result String - название дела\r\n    */\r\n    getName() {\r\n        return this.caseInfo.Name;\r\n    }\r\n\r\n    /*\r\n    Запись имени дела\r\n    @param name(String) - название дела\r\n    @result Undefined\r\n    */\r\n    setName(name) {\r\n        this.caseInfo.Name = name;\r\n    }\r\n\r\n    /*\r\n    Получение имени стадии\r\n    @param Null\r\n    @result String - название стадии\r\n    */\r\n    getStage() {\r\n        return this.caseInfo.Stage.Name;\r\n    }\r\n\r\n    /*\r\n    Смена стадии\r\n    @param name(String) - название стадии\r\n    @result Undefined\r\n    */\r\n    setStage(name) {\r\n        let stObj = {};\r\n        let find = false;\r\n        let res = fetch({\r\n            url: '/api/Stages/GetProjectType?command.projectTypeId=' + this.caseInfo.ProjectType.Id,\r\n            method: 'GET'\r\n        });\r\n        let stage = JSON.parse(res.body).Result.Stages;\r\n        stage.forEach(st => {\r\n            if (st.Name === name) {\r\n                find = true;\r\n                stObj.Id = st.Id;\r\n                stObj.Name = st.Name;\r\n            }\r\n        });\r\n        if (!find) {\r\n            this.Error['message'] = 'Стадия '+name+' не найдена';\r\n        } else {\r\n            this.caseInfo.Stage = stObj;\r\n        }\r\n    }\r\n\r\n    //Получение Проекта дела\r\n    getProject() {\r\n        if (this.caseInfo.ProjectGroup) {\r\n            return this.caseInfo.ProjectGroup.Name;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    //Смена Проекта\r\n    setProject(nameProj, nameFold) {\r\n        let find = false;\r\n        let body = {\r\n            \"Page\": 0,\r\n            \"PageSize\": 500\r\n        };\r\n        let res = fetch({\r\n            url: 'api/ProjectGroups/PostProjectGroups',\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body)\r\n        });\r\n        let responseble = JSON.parse(res.body).Result;\r\n        responseble.forEach(i => {\r\n            if (i.Name === nameProj && i.ProjectFolder.Name === nameFold) {\r\n                find = true;\r\n                console.log(JSON.stringify(this.id));\r\n                console.log(JSON.stringify(i.Id));\r\n                let body = {\r\n                        \"ProjectId\": this.id,\r\n                        \"ProjectGroupId\": i.Id\r\n                    };\r\n                let res = fetch({\r\n                    url: 'api/ProjectAction/MoveToProjectGroup',\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify(body)\r\n                });\r\n            }\r\n        });\r\n        if (!find) return null;\r\n    }\r\n    //Получение Папки дела\r\n    getFolder() {\r\n        if (this.caseInfo.ProjectFolder) {\r\n            return this.caseInfo.ProjectFolder.Name;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //Получение ответственного\r\n    getResponsible() {\r\n        if (this.caseInfo.Responsible) {\r\n            return this.caseInfo.Responsible.Name;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    //Смена ответственного\r\n    setResponsible(name) {\r\n        let resObj = {};\r\n        let body = {\r\n                \"UserType\": \"User\",\r\n                \"NameString\": name,\r\n                \"Page\": 0,\r\n                \"PageSize\": 0\r\n            };\r\n        let res = fetch({\r\n            url: '/api/Users/GetUsers',\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body)\r\n        });\r\n        let responseble = JSON.parse(res.body).Result[0];\r\n        resObj.Id = responseble.Id;\r\n        resObj.Name = responseble.Name;\r\n        this.caseInfo.Responsible = resObj;\r\n    }\r\n    //Получение клиента по делу\r\n    getClient() {\r\n        if (this.caseInfo.Client) {\r\n            return this.caseInfo.Client.Name;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    //Смена клиента по делу\r\n    setClient(name) {\r\n        let resObj = {};\r\n        let body = {\r\n            \"Names\": [name],\r\n            \"Page\": 0,\r\n            \"PageSize\": 20\r\n        };\r\n        let res = fetch({\r\n            url: '/api/Participants/GetParticipants',\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(body)\r\n        });\r\n        let responseble = JSON.parse(res.body);\r\n        let findResponsible = responseble.Result.find(r => r.DisplayName === name);\r\n        resObj.Id = findResponsible.Id;\r\n        resObj.Name = findResponsible.DisplayName;\r\n        this.caseInfo.Client = resObj;\r\n    }\r\n\r\n    //Получение основных данных по делу\r\n    getinfo() {\r\n        let res = fetch({\r\n            url: '/api/Projects/GetProject/' + this.id,\r\n            method: 'GET'\r\n        });\r\n        let otvet = JSON.parse(res.body).Result;\r\n        otvet.ProjectType.Tabs.forEach(tab => {\r\n            if (tab.IsSystem === false) {\r\n                this.tabs.push({Id: tab.Id, Name: tab.Name, blocks: []});\r\n            }\r\n        });\r\n        return otvet;\r\n    }\r\n    //Получение блоков с основной вкладки\r\n    getMainBlocks() {\r\n        let res = fetch({\r\n            url: '/api/ProjectCustomValues/GetProjectSummary?request.id=' + this.id,\r\n            method: 'GET'\r\n        });\r\n        return JSON.parse(res.body).Result;\r\n    }\r\n\r\n    //Получение блоков из дополнительных вкладок\r\n    getAllTabBlocks() {\r\n        if (this.tabs.length !== 0) {\r\n            this.tabs.forEach(tab => {\r\n                let res = fetch({\r\n                url: '/api/ProjectCustomValues/GetProjectTab?request.id=' + this.id + '&request.projectTypeTabId=' + tab.Id,\r\n                method: 'GET'\r\n                });\r\n                let otvet = JSON.parse(res.body).Result;\r\n                otvet.MetadataOfBlocks.forEach(el => {\r\n                    tab.blocks.push(el.Id);\r\n                });\r\n                this.caseBlocks.Blocks = this.caseBlocks.Blocks.concat(otvet.Blocks);\r\n                this.caseBlocks.MetadataOfBlocks = this.caseBlocks.MetadataOfBlocks.concat(otvet.MetadataOfBlocks);\r\n                this.caseBlocks.Images = this.caseBlocks.Images.concat(otvet.Images);\r\n                this.caseBlocks.FormulaDependencies = this.caseBlocks.FormulaDependencies.concat(otvet.FormulaDependencies);\r\n            }); \r\n        } \r\n    }\r\n\r\n    //Запись в дело\r\n    save() {\r\n        let casedata = JSON.parse(JSON.stringify(this.caseInfo));\r\n        casedata.Blocks = this.caseBlocks.Blocks;\r\n        let request = {\r\n            url: '/api/Projects/UpdateProjectSummary',\r\n            method: 'PUT',\r\n            body: JSON.stringify(casedata),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        let response = fetch(request);\r\n            if (response.status !== 200) {\r\n                this.Error.message = JSON.parse(response.body).Error;\r\n                return false;\r\n            }\r\n        return true;\r\n    }\r\n\r\n    //Запись данных во вкладку в деле\r\n    saveTab(tabname) {\r\n        let tabid = '';\r\n        let blocks = null;\r\n        this.tabs.forEach(tab => {\r\n            if (tab.Name === tabname) {\r\n                tabid = tab.Id;\r\n                blocks = tab.blocks;\r\n            }\r\n        });\r\n        let tabBlocks = [];\r\n        if (blocks) {\r\n            blocks.forEach(a => {\r\n                this.caseBlocks.Blocks.forEach(b => {\r\n                    if (b.VisualBlockId === a) {\r\n                        tabBlocks.push(b);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        let requestUpdate = {};\r\n        requestUpdate.Id = this.caseInfo.Id;\r\n        requestUpdate.ProjectTypeTabId = tabid;\r\n        requestUpdate.Blocks = tabBlocks;\r\n        let request = {\r\n            url: '/api/Projects/UpdateProjectTab',\r\n            method: 'PUT',\r\n            body: JSON.stringify(requestUpdate),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        let response = fetch(request);\r\n            if (response.status !== 200) {\r\n                this.Error.message = JSON.parse(response.body).Error;\r\n                return false;\r\n            }\r\n        return true;\r\n    }\r\n\r\n    //Получение id поля по \"Тэгу\", \"Системному тегу\" или \"Имени поля\"\r\n    getid(textFind, typeFind = 'Tag') {\r\n        let result = {};\r\n        let ok = false;\r\n        this.caseBlocks.MetadataOfBlocks.forEach((MBlock) => {\r\n            MBlock.Lines.forEach((MLine) => {\r\n                MLine.Fields.forEach((MField) => {\r\n                    switch(typeFind) {\r\n                    case 'Tag':\r\n                        if (MField.Tag === textFind) {\r\n                            result.idB = MBlock.Id;\r\n                            result.idL = MLine.Id;\r\n                            result.idF = MField.Id;\r\n                            result.name = MField.ProjectField.Name;\r\n                            result.type = MField.ProjectField.DataFormat.SysName;\r\n                            ok = true;\r\n                        }\r\n                        break;\r\n                    case 'Name':\r\n                        if (MField.ProjectField.Name === textFind) {\r\n                            result.idB = MBlock.Id;\r\n                            result.idL = MLine.Id;\r\n                            result.idF = MField.Id;\r\n                            result.name = MField.ProjectField.Name;\r\n                            result.type = MField.ProjectField.DataFormat.SysName;\r\n                            ok = true;\r\n                        }\r\n                        break;\r\n                    case 'ExternalTag':\r\n                        if (MField.ExternalTag === textFind) {\r\n                            result.idB = MBlock.Id;\r\n                            result.idL = MLine.Id;\r\n                            result.idF = MField.Id;\r\n                            result.name = MField.ProjectField.Name;\r\n                            result.type = MField.ProjectField.DataFormat.SysName;\r\n                            ok = true;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw \"Недопустимый критерий поиска. Искать можно только по 'Tag', 'ExternalTag' и 'Name' поля\";\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        if (!ok) throw \"Поле с \"+typeFind+\" \"+textFind+\" не найдено\";\r\n        return result;\r\n    }\r\n\r\n    //Получение значения из поля по тегу\r\n    getValue(textFind, typeFind = 'Tag', lineNumInBlock = false) {\r\n        let result = [];\r\n        let resultObj = {};\r\n        let count = 0;\r\n        let linecount = [];\r\n        let findValueFlag = false;\r\n        let findLineFlag = false;\r\n        let meta = this.getid(textFind, typeFind);\r\n        let findBlockFlag = false;\r\n        this.caseBlocks.Blocks.forEach((Block) => {\r\n            if (Block.VisualBlockId === meta.idB) {\r\n                count = 0;\r\n                findBlockFlag = true;\r\n                findLineFlag = false;\r\n                Block.Lines.forEach((Line) => {\r\n                    if (Line.BlockLineId === meta.idL) {\r\n                        count++;\r\n                        findLineFlag = true;\r\n                        findValueFlag = false;\r\n                        Line.Values.forEach((Value) => {\r\n                            if (Value.VisualBlockProjectFieldId === meta.idF) {\r\n                                findValueFlag = true;\r\n                                switch(meta.type) {\r\n                                case \"Text\" :\r\n                                case \"Number\":\r\n                                case \"Date\":\r\n                                case \"Bool\":\r\n                                case \"TextArea\":\r\n                                case \"Hyperlink\":\r\n                                case \"TemplateNumber\":\r\n                                case \"RequiredBool\":\r\n                                    result.push(Value.Value);\r\n                                    break;\r\n                                case \"CalculationFormula\":\r\n                                    result.push(Value.Value.Result);\r\n                                    break;\r\n                                case \"Dictionary\":\r\n                                case \"Participant\":\r\n                                case \"User\":\r\n                                case \"Case\":\r\n                                    result.push(Value.Value);\r\n                                    break;\r\n                                case \"Document\":\r\n                                    let temp = {\"Id\": Value.Value.Id,\r\n                                                \"Name\": Value.Value.Name\r\n                                                };\r\n                                    result.push(temp);\r\n                                    break;\r\n                                default:\r\n                                    throw \"С полем типа \"+meta.type+\" я пока работать не умею :(\";\r\n                                }\r\n                            }  \r\n                        });\r\n                        if (!findValueFlag) result.push(null);\r\n                    }\r\n                });\r\n                if (!findLineFlag) {\r\n                    result.push(null);\r\n                    linecount.push(1);\r\n                } else {\r\n                    linecount.push(count);\r\n                }\r\n            }\r\n        });\r\n        if(!findBlockFlag) {\r\n            result.push(null);\r\n            linecount.push(1);\r\n        }\r\n        resultObj.value = result;\r\n        resultObj.struct = linecount;\r\n        if (lineNumInBlock) return resultObj;\r\n        else if (result.length === 1) return result[0];\r\n        else return result;\r\n    }\r\n\r\n    //Запись значения в поле по тегу\r\n    setValue(value, textFind, typeFind = 'Tag') {\r\n        let valueint = {value: [], struct: []};\r\n        let typeobject = {}.toString.call(value);\r\n        if (typeobject === \"[object Array]\") {\r\n            valueint.value = value;\r\n            for(let a=0;a<value.length;a++) {\r\n                valueint.struct[a] = 1;\r\n            }\r\n        } else if (typeobject === \"[object Object]\") {\r\n            if (value.struct) {\r\n                valueint = value;\r\n            } else {\r\n                valueint.value[0] = value;\r\n                valueint.struct[0] = 1;\r\n            } \r\n        } else {\r\n            valueint.value[0] = value;\r\n            valueint.struct[0] = 1;\r\n        }\r\n\r\n        let count = valueint.struct.length;\r\n        let meta = this.getid(textFind, typeFind);\r\n        let template = [];\r\n        let n = 0;           \r\n        for (let i = 0; i < count; i++) {\r\n            template[i] = {};\r\n            template[i].VisualBlockId = meta.idB;\r\n            template[i].Lines = [];\r\n            for (let j = 0; j<valueint.struct[i]; j++) {\r\n                template[i].Lines[j] = {Values:[{}]};\r\n                template[i].Lines[j].BlockLineId = meta.idL;\r\n                template[i].Lines[j].Values[0].VisualBlockProjectFieldId = meta.idF;\r\n                template[i].Lines[j].Values[0].Value = valueint.value[n];\r\n                n++;\r\n            }\r\n        }\r\n\r\n            let i = 0,j = 0;\r\n            let isFindField = false;\r\n            let isFindLine = false;\r\n            let isFindBlock = false;\r\n            this.caseBlocks.Blocks.forEach((db, nb) => {\r\n                if (db.VisualBlockId === meta.idB) {\r\n                    isFindBlock = true;\r\n                    db.Lines.forEach((dl, nl) => {\r\n                        if (dl.BlockLineId === meta.idL) {\r\n                            isFindField = false;\r\n                            isFindLine = true;\r\n                            dl.Values.forEach((dv, nv) => {\r\n                                if (dv.VisualBlockProjectFieldId === meta.idF) {\r\n                                    dv.Value = template[i].Lines[j].Values[0].Value;\r\n                                    isFindField = true;\r\n                                }\r\n                            });\r\n                            if (!isFindField) {\r\n                                dl.Values.push(template[i].Lines[j].Values[0]);\r\n                            }\r\n                            j++;\r\n                        }\r\n                    });\r\n                    if (!isFindLine) {\r\n                        db.Lines.push(template[i].Lines[j]);\r\n                    }\r\n                j = 0;\r\n                i++;\r\n                }\r\n            });\r\n            if (!isFindBlock) {\r\n                template.forEach(t => {\r\n                    this.caseBlocks.Blocks.push(t);\r\n                });\r\n            }\r\n    }\r\n\r\n/**Вставка мулти-строки в нужное место с заполнением одного значения в строке\r\n     * @param value (Number, String, Array) - значение для записи или их массив\r\n     * @param numBl (Number) - Порядковый номер блока с 1\r\n     * @param numLn (Number) - Порядковый номер строки в которой хотим записать значение с 1\r\n     * @param textFind (String) - Строка для поиска\r\n     * @param typeFind = 'Tag' (String) Вариант поиска (Tag, ExternalTag, Name)\r\n     * @result (Number) - Индекс первой вставленной строки\r\n     */\r\n    insertValue(value, numBl, numLn , textFind, typeFind = 'Tag') {\r\n        let typeobject = {}.toString.call(value);\r\n        if (typeobject != \"[object Array]\") {\r\n            value = [value];\r\n        } else if (typeobject === \"[object Array]\") {\r\n            value = value.reverse();\r\n        }\r\n        let meta = this.getid(textFind, typeFind);\r\n        console.log(JSON.stringify(meta));\r\n        let templateSave = [];\r\n        let template = {\r\n            \"BlockLineId\": meta.idL,\r\n            \"Values\": [{\r\n                \"Value\": null,\r\n                \"VisualBlockProjectFieldId\": meta.idF\r\n            }]\r\n        };\r\n\r\n        let i = 1;\r\n        let j = 1;\r\n        let index = 0;\r\n        let flagFindLine = false;\r\n        let flagFindBlock = false;\r\n\r\n        this.caseBlocks.Blocks.forEach((db, nb) => {\r\n            if (db.VisualBlockId === meta.idB) {\r\n                if (numBl === i) {\r\n                    flagFindBlock = true;\r\n                    db.Lines.forEach((dl, nl) => {\r\n                        if (dl.BlockLineId === meta.idL) {\r\n                            if (numLn === j) {\r\n                                index += j-1;\r\n                                flagFindLine = true;\r\n                                templateSave = JSON.parse(JSON.stringify(dl.Values));\r\n                                dl.Values.forEach(df => {\r\n                                    if (df.VisualBlockProjectFieldId === meta.idF) {\r\n                                        df.Value = value[0];\r\n                                    } else {\r\n                                        df.Value = null;\r\n                                    }\r\n                                });\r\n                            } else if (j > numLn && numLn != 0) {\r\n                                let temp = JSON.parse(JSON.stringify(templateSave));\r\n                                templateSave = JSON.parse(JSON.stringify(dl.Values));\r\n                                db.Lines[nl].Values = temp; \r\n                            }\r\n                            j++;\r\n                        } \r\n                    });\r\n                    if (!flagFindLine) {\r\n                        console.log('Not Find Line');\r\n                        index += j-1;\r\n                        template.Values[0].Value = value[0];\r\n                        db.Lines.push(template);\r\n                    } else {\r\n                        template.Values = templateSave;\r\n                        db.Lines.push(template);\r\n                    }\r\n                } else if (i < numBl) {\r\n                    db.Lines.forEach((dl, nl) => {\r\n                        if (dl.BlockLineId === meta.idL) {\r\n                            index++;\r\n                        }\r\n                    });\r\n                }\r\n                i++;\r\n            }\r\n        });\r\n        if (!flagFindBlock) {\r\n            console.log('Not Find Block');\r\n            let temp_block = {};\r\n            temp_block.VisualBlockId = meta.idB;\r\n            temp_block.Lines = [];\r\n            temp_block.Lines.push(template);\r\n            temp_block.Lines[0].Values[0].Value = value[0];\r\n            this.caseBlocks.Blocks.push(temp_block);\r\n        }\r\n\r\n        console.log('Результирующий индекс: '+index);\r\n        console.log('Количество мультистрок в текущем блоке: '+(j-1));\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Вставка одной мульти-строки с записью множества значений \r\n     * @param value (Array) - Массив значений для записи\r\n     * @param numBl (Number) - Порядковый номер блока с 1\r\n     * @param numLn (Number) - Порядковый номер строки в которой хотим записать значение с 1\r\n     * @param textFind (Array) - Массив тегов для поиска\r\n     * @param typeFind = 'Tag' (String) Вариант поиска (Tag, ExternalTag, Name)\r\n     * @result (Null)\r\n     */\r\n    insertLine(value, numBl, numLn , textFind, typeFind = 'Tag') {\r\n        let ind = this.insertValue(value[0], numBl, numLn , textFind[0], typeFind);\r\n        for(let i=1;i<value.length;i++) {\r\n            let temp = this.getValue(textFind[i], typeFind, true);\r\n            if (!temp) {temp = {value: [], struct: [1]}};\r\n            temp.value[ind] = value[i];\r\n            this.setValue(temp, textFind[i],typeFind);\r\n        }\r\n    }\r\n\r\n    //==========EXPEREMENTAL===================\r\n    addMultiLine(value, textFind, typeFind = 'Tag') {\r\n        let count = value.length;\r\n        let meta = this.getid(textFind, typeFind);\r\n        let template = {};\r\n        template.VisualBlockId = meta.idB;\r\n        template.Lines = [];\r\n        for (let j = 0; j<count; j++) {\r\n            console.log(JSON.stringify('j='+j));\r\n            template.Lines[j] = {Values:[{}]};\r\n            template.Lines[j].BlockLineId = meta.idL;\r\n            template.Lines[j].Values[0].VisualBlockProjectFieldId = meta.idF;\r\n            template.Lines[j].Values[0].Value = value[j];\r\n        }\r\n        console.log(JSON.stringify(template));\r\n        \r\n            let j = 0;\r\n            let isFindField = false;\r\n            let isFindLine = false;\r\n            let isFindBlock = false;\r\n            this.caseBlocks.Blocks.forEach((db, nb) => {\r\n                if (db.VisualBlockId === meta.idB) {\r\n                    isFindBlock = true;\r\n                    //console.log(JSON.stringify('Block '+nb));\r\n                    db.Lines.forEach((dl, nl) => {\r\n                        if (dl.BlockLineId === meta.idL) {\r\n                            isFindLine = true;\r\n                            //console.log(JSON.stringify('Line '+nl));\r\n                            isFindField = false;\r\n                            dl.Values.forEach((dv, nv) => {\r\n                                if (dv.VisualBlockProjectFieldId === meta.idF) {\r\n                                    console.log(JSON.stringify('VF j='+j));\r\n                                    dv.Value = template.Lines[j].Values[0].Value;\r\n                                    isFindField = true;\r\n                                }\r\n                            });\r\n                            if (!isFindField) {\r\n                                console.log(JSON.stringify('VnF j='+j));\r\n                                dl.Values.push(template.Lines[j].Values[0]);\r\n                            }\r\n                            j++;\r\n                        }\r\n                    });\r\n                    //if (!isFindLine) {\r\n                    for (;j<count;j++) {\r\n                        console.log(JSON.stringify('LnF j='+j));\r\n                        db.Lines.push(template.Lines[j]);\r\n                    }\r\n                }\r\n            });\r\n            if (!isFindBlock) {\r\n                    console.log(JSON.stringify('Block not find'));\r\n                    this.caseBlocks.Blocks.push(template);\r\n            }\r\n    }\r\n\r\n /**\r\n     * Создает cправочник вида {key: val}\r\n     * где key - Tag, ExternalTag, Name, Id\r\n     * а val - значение\r\n     */\r\n    parseBlock(key, name = 'All') {\r\n        let result = {};\r\n        let all = false;\r\n        if (name === 'All') all = true;\r\n        if (this.caseBlocks.Blocks) {\r\n            this.caseBlocks.MetadataOfBlocks.forEach(b => {\r\n                if (all || b.Name === name) {\r\n                    b.Lines.forEach((l, ln) => {\r\n                            l.Fields.forEach(f => {\r\n                                let recKey = '';\r\n                                if (key === 'Id') {\r\n                                    recKey = f.Id;\r\n                                } else if (key === 'Tag') {\r\n                                    recKey = f.Tag;\r\n                                } else if (key === 'ExternalTag') {\r\n                                    recKey = f.ExternalTag;\r\n                                } else if (key === 'Name') {\r\n                                    recKey = f.ProjectField.Name;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                                result[recKey] = (l.LineType.SysName === 'Repeated') ? [] : '';\r\n                                //console.log(JSON.stringify(recKey));\r\n                                this.caseBlocks.Blocks.forEach(bb => {\r\n                                    bb.Lines.forEach(ll => {\r\n                                        ll.Values.forEach(v => {\r\n                                            if (l.LineType.SysName === 'Repeated') {\r\n                                                if (v.VisualBlockProjectFieldId === f.Id) {\r\n                                                    result[recKey][ll.Order] = v.Value;\r\n                                                }\r\n                                            } else {      \r\n                                                if (v.VisualBlockProjectFieldId === f.Id) {                                         \r\n                                                    result[recKey] = v.Value;\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    });\r\n                                });\r\n                            });\r\n                    });\r\n                }\r\n            });\r\n            return result;\r\n        } else {\r\n            return null;\r\n        }\r\n        \r\n    }\r\n    /**\r\n     * Возвращает массив с объектами  из Id участников в деле с их ролями\r\n     * @param (Null)\r\n     * @result (Array) [{role: '', list: []}]\r\n     */\r\n    getParticipList() {\r\n        let body = {\r\n            \"Types\":[],\r\n            \"RoleIds\":[],\r\n            \"ContextSearchString\":\"\",\r\n            \"Page\":1,\r\n            \"PageSize\":100,\r\n            \"Projects\":[this.id]\r\n        };\r\n        let respRolledPart = fetch({\r\n            url: '/api/Participants/GetRolledParticipants',\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n                },\r\n            body: JSON.stringify(body)\r\n        });\r\n        let allInfoRolledPart = JSON.parse(respRolledPart.body);\r\n        let result = [];\r\n        allInfoRolledPart.Result.forEach(p => {\r\n            let nameRole = p.ProjectSummary.RoleInProject.Name;\r\n            let findElem = result.find(name => name.role === nameRole);\r\n            if (findElem) {\r\n                findElem.list.push(p.Id);\r\n            } else {\r\n                result.push({role: nameRole, list: [p.Id]});\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * Возвращает массив с объектами  из Id участников в деле с их ролями\r\n     * @param (Null)\r\n     * @result (Array) [{role: '', list: []}]\r\n     */\r\n    getDocList() {\r\n        let body = {\r\n            \"DocumentTypeIds\":[],\r\n            \"StartReceivedDate\":\"\",\r\n            \"EndReceivedDate\":\"\",\r\n            \"AuthorIds\":[],\r\n            \"FullSearchString\":\"\",\r\n            \"DocumentSortOrder\":{\r\n                \"Column\":\"Name\",\r\n                \"IsAsc\":true\r\n            },\r\n            \"FolderId\":this.caseInfo.DocumentFolderId,\r\n            \"ExternalStorage\":null,\r\n            \"Page\":1,\r\n            \"PageSize\":100\r\n        };\r\n        let respDoc = fetch({\r\n            url: '/api/VirtualCatalog/GetContent',\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n                },\r\n            body: JSON.stringify(body)\r\n        });\r\n        let allInfoDoc = JSON.parse(respDoc.body);\r\n        let result = [];\r\n        allInfoDoc.Result.forEach(d => {\r\n            let isImportedCB = (d.DocumentType.SysName === \"ImpotedFromCB\") ? true : false;\r\n            let temp = {\r\n                \"Name\": d.Name,\r\n                \"Extension\": d.Extension,\r\n                \"DocumentType\": d.DocumentType.Name,\r\n                \"isImportedCB\": isImportedCB,\r\n                \"ReceivedDate\": d.ReceivedDate,\r\n                \"File\": d.File\r\n            };\r\n            result.push(temp);\r\n        });\r\n        return result;\r\n    }\r\n}"},"Conditions":[],"RestrictionConditions":[]}